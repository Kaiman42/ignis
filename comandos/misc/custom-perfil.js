const { SlashCommandBuilder } = require('@discordjs/builders');
const { EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const { gerarCorAleatoria } = require('../../configuracoes/randomColor');
const { getCollection } = require('../../configuracoes/database');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('custom-perfil')
        .setDescription('Exibe informa√ß√µes detalhadas do perfil de um usu√°rio')
        .addUserOption(option => 
            option.setName('usuario')
                .setDescription('O usu√°rio para ver o perfil (opcional)')
                .setRequired(false)),

    async execute(interaction, ignis) {
        await interaction.deferReply();
        
        // Get the target user (mentioned or command user)
        const targetUser = interaction.options.getUser('usuario') || interaction.user;
        const member = await interaction.guild.members.fetch(targetUser.id).catch(() => null);
        
        if (!member) {
            return interaction.editReply('N√£o foi poss√≠vel encontrar este usu√°rio no servidor.');
        }
        
        // Calculate join dates - formatando apenas a data, sem a hora
        const discordJoinDate = new Date(targetUser.createdAt).toLocaleDateString('pt-BR');
        const serverJoinDate = new Date(member.joinedAt).toLocaleDateString('pt-BR');
        
        // Check if user is a server booster
        const isBooster = member.premiumSince ? 'Sim' : 'N√£o';
        
        // Get user status - improved version
        let status = 'Offline';
        if (member.presence) {
            const presenceStatus = member.presence.status;
            switch (presenceStatus) {
                case 'online': status = 'üü¢ Online'; break;
                case 'idle': status = 'üü† Ausente'; break;
                case 'dnd': status = 'üî¥ N√£o perturbe'; break;
                default: status = '‚ö´ Offline'; break;
            }
        } else {
            status = '‚ö´ Offline';
        }
        
        // Important note: For status to work properly, the bot needs GUILD_PRESENCES intent enabled
        
        // Check for specific roles (you can customize this list later)
        const importantRoles = [
            // Add your important role IDs here - replace with actual role IDs
            '',  // Example: Admin
            '9876543210987654321'   // Example: Moderator
        ];
        
        // Display all roles instead of filtering if no important roles are defined
        let userRoles;
        if (importantRoles.length === 0 || importantRoles.every(id => id.includes('Example'))) {
            userRoles = member.roles.cache
                .filter(role => role.id !== interaction.guild.id) // Filter out @everyone
                .map(role => role.name)
                .join(', ') || 'Nenhum cargo';
        } else {
            userRoles = member.roles.cache
                .filter(role => importantRoles.includes(role.id))
                .map(role => role.name)
                .join(', ') || 'Nenhum cargo importante';
        }

        // Get level progression information
        let levelInfo = 'Dados de n√≠vel n√£o dispon√≠veis';
        let currentLevel = 0;
        let currentXP = 0;
        let xpForNextLevel = 0;
        let progressPercentage = 0;
        let cargoNivelInfo = '';
        
        try {
            if (ignis && ignis.database) {
                // Buscar o documento principal que cont√©m todos os usu√°rios
                const mainDoc = await ignis.database.rank.findOne({ _id: 'main' });
                
                // Tamb√©m acessar as utilidades do m√≥dulo niveis para c√°lculo de XP
                const niveis = require('../../eventos/niveis');
                
                if (mainDoc && mainDoc.users && Array.isArray(mainDoc.users)) {
                    // Encontrar o usu√°rio espec√≠fico no array de usu√°rios
                    const userData = mainDoc.users.find(user => user.userId === targetUser.id);
                    
                    if (userData) {
                        // Calcular progresso de n√≠vel
                        currentLevel = userData.level || 0;
                        currentXP = userData.xp || 0;
                        xpForNextLevel = niveis.utils.calculateRequiredXP(currentLevel);
                        const xpRemaining = xpForNextLevel - currentXP;
                        
                        // Criar barra de progresso
                        const progressBarLength = 15;
                        const progress = Math.min((currentXP / xpForNextLevel) * progressBarLength, progressBarLength);
                        const progressBar = '‚ñ†'.repeat(Math.floor(progress)) + '‚ñ°'.repeat(progressBarLength - Math.floor(progress));
                        progressPercentage = ((currentXP / xpForNextLevel) * 100).toFixed(1);
                        
                        // Formatar informa√ß√µes de n√≠vel
                        levelInfo = `**N√≠vel atual:** ${currentLevel}\n` +
                                    `**Faltam:** ${xpRemaining} XP para o pr√≥ximo n√≠vel\n` +
                                    `**Progresso:** \`${progressBar}\` (${progressPercentage}%)`;
                        
                        console.log(`Dados de n√≠vel encontrados para ${targetUser.username}: N√≠vel ${currentLevel}, XP ${currentXP}/${xpForNextLevel}`);
                        
                        // Verificar cargo de n√≠vel do usu√°rio
                        try {
                            const cargosNivelCollection = await getCollection('cargosNivel');
                            const cargosDoc = await cargosNivelCollection.findOne({ _id: { $exists: true } });
                            
                            if (cargosDoc && cargosDoc.cargos && Array.isArray(cargosDoc.cargos)) {
                                // Encontrar o cargo do n√≠vel atual ou o n√≠vel mais pr√≥ximo abaixo
                                let cargoNivel = null;
                                let cargoNivelApropriado = null;
                                
                                // Classifica os cargos em ordem decrescente de n√≠vel
                                const cargosOrdenados = [...cargosDoc.cargos].sort((a, b) => b.nivel - a.nivel);
                                
                                // Encontrar o cargo de n√≠vel apropriado para o usu√°rio
                                for (const cargo of cargosOrdenados) {
                                    if (currentLevel >= cargo.nivel) {
                                        cargoNivelApropriado = cargo;
                                        break;
                                    }
                                }
                                
                                // Verificar se o usu√°rio tem o cargo
                                const temCargo = cargoNivelApropriado ? member.roles.cache.has(cargoNivelApropriado.id) : false;
                                
                                if (cargoNivelApropriado) {
                                    if (temCargo) {
                                        cargoNivelInfo = `\n\n**Cargo de N√≠vel:** ${cargoNivelApropriado.nome} ‚úÖ`;
                                    } else {
                                        cargoNivelInfo = `\n\n**Cargo de N√≠vel Recomendado:** ${cargoNivelApropriado.nome} ‚ùå\n*Voc√™ n√£o possui o cargo de n√≠vel apropriado. Use /custom-cor para solicitar.*`;
                                    }
                                    
                                    // Se tiver pr√≥ximo n√≠vel, mostrar informa√ß√£o
                                    const proximoIndex = cargosOrdenados.findIndex(c => c.id === cargoNivelApropriado.id) - 1;
                                    if (proximoIndex >= 0) {
                                        const proximoNivel = cargosOrdenados[proximoIndex];
                                        cargoNivelInfo += `\n**Pr√≥ximo cargo:** ${proximoNivel.nome} (N√≠vel ${proximoNivel.nivel})`;
                                    }
                                } else {
                                    cargoNivelInfo = "\n\n**Cargo de N√≠vel:** Voc√™ ainda n√£o atingiu o n√≠vel m√≠nimo para obter um cargo.";
                                }
                            } else {
                                console.log('Documento de cargos de n√≠vel n√£o encontrado ou mal formatado');
                            }
                        } catch (error) {
                            console.error('Erro ao verificar cargos de n√≠vel:', error);
                        }
                        
                    } else {
                        console.log(`Usu√°rio ${targetUser.username} n√£o encontrado no array de usu√°rios`);
                        levelInfo = 'Usu√°rio ainda n√£o ganhou XP';
                    }
                } else {
                    console.log(`Documento principal n√£o encontrado ou n√£o cont√©m array de usu√°rios`);
                    levelInfo = 'Usu√°rio ainda n√£o ganhou XP';
                }
            } else {
                console.error('Conex√£o com o banco de dados n√£o dispon√≠vel no contexto ignis');
                levelInfo = 'Erro de conex√£o com o banco de dados';
            }
        } catch (error) {
            console.error('Erro ao obter dados de n√≠vel:', error);
            levelInfo = 'Erro ao obter dados de n√≠vel: ' + error.message;
        }

        // Create the embed
        const embed = new EmbedBuilder()
            .setColor(gerarCorAleatoria())
            .setTitle(`Perfil de ${targetUser.username}`)
            .setThumbnail(targetUser.displayAvatarURL({ dynamic: true, size: 256 }))
            .addFields(
                { name: 'üìÖ Entrou no Discord em', value: discordJoinDate, inline: true },
                { name: 'üè† Entrou no servidor em', value: serverJoinDate, inline: true },
                { name: '\u200B', value: '\u200B', inline: true },
                { name: 'üìä Status', value: status, inline: true },
                { name: 'üöÄ Impulsionador', value: isBooster, inline: true },
                { name: '\u200B', value: '\u200B', inline: true },
                { name: 'üèÜ Cargos importantes', value: userRoles },
                { name: 'üìà Progress√£o de N√≠vel', value: levelInfo + cargoNivelInfo }
            )
            .setFooter({ text: `ID: ${targetUser.id}` })
            .setTimestamp();
        
        await interaction.editReply({ embeds: [embed] });
    }
};
