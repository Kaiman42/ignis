const { EmbedBuilder } = require('discord.js');
const { gerarCorAleatoria } = require('../configuracoes/randomColor');
const database = require('../configuracoes/mongodb');

// Inicializa√ß√£o do m√≥dulo
async function initialize(client, ignisContext) {
  try {
    // Configurar o manipulador de eventos para novos membros
    setupWelcomeHandler(client, ignisContext);
    console.log('M√≥dulo de boas-vindas inicializado com sucesso!');
  } catch (error) {
    console.error('Erro ao inicializar m√≥dulo de boas-vindas:', error);
  }
}

function setupWelcomeHandler(client, ignisContext) {
  // Evento acionado quando um membro completa o onboarding (recebe todas as roles do servidor)
  client.on('guildMemberUpdate', async (oldMember, newMember) => {
    try {
      // Ignorar bots
      if (newMember.user.bot) return;
      
      // Verificar se o membro completou o processo de onboarding
      // Isso pode ser detectado verificando se as roles do membro mudaram
      // e se agora ele tem a role espec√≠fica que √© concedida ap√≥s o onboarding
      
      // Se o membro n√£o tinha roles antes e agora tem, ou se as roles aumentaram
      const hadRolesBefore = oldMember.roles.cache.size > 1; // > 1 porque @everyone √© uma role
      const hasRolesNow = newMember.roles.cache.size > 1;
      
      // Se o membro j√° tinha roles ou n√£o adquiriu novas roles, n√£o considerar como onboarding conclu√≠do
      if (hadRolesBefore || !hasRolesNow) return;
      
      // Verificar se o usu√°rio est√° na lista de evitar_spam
      const userId = newMember.user.id;
      const evitarSpam = await verificarUsuarioEmEvitarSpam(userId);
      
      // Se o usu√°rio estiver na lista de evitar_spam, n√£o envia a mensagem de boas-vindas
      if (evitarSpam) {
        console.log(`Usu√°rio ${newMember.user.tag} (${userId}) est√° na lista de evitar_spam. Mensagem de boas-vindas n√£o enviada.`);
        return;
      }
      
      // Buscar o canal de boas-vindas
      const welcomeChannel = await findWelcomeChannel(newMember.guild, ignisContext);
      if (!welcomeChannel) {
        console.log(`Canal de boas-vindas n√£o encontrado para o servidor ${newMember.guild.name}`);
        return;
      }
      
      // Criar a embed de boas-vindas
      const embed = createWelcomeEmbed(newMember);
      
      // Enviar a mensagem de boas-vindas
      const welcomeMessage = await welcomeChannel.send({ 
        content: `<@${newMember.id}>`,
        embeds: [embed]
      });
      
      // Adicionar o usu√°rio √† lista de evitar_spam
      await adicionarUsuarioEmEvitarSpam(userId);
      
      // Configurar a exclus√£o da mensagem ap√≥s 1 minuto
      setTimeout(() => {
        welcomeMessage.delete().catch(error => 
          console.error('N√£o foi poss√≠vel excluir a mensagem de boas-vindas:', error)
        );
      }, 60 * 1000); // 1 minuto em milissegundos
      
      console.log(`Mensagem de boas-vindas enviada para ${newMember.user.tag}`);
    } catch (error) {
      console.error('Erro ao enviar mensagem de boas-vindas ap√≥s onboarding:', error);
    }
  });
}

// Fun√ß√£o para criar a embed de boas-vindas
function createWelcomeEmbed(member) {
  return new EmbedBuilder()
    .setColor(gerarCorAleatoria())
    .setTitle(`‚ú® Boas-vindas √† ${member.guild.name}! ‚ú®`)
    .setDescription(
      `Ol√° ${member.user.username}!\n\n` +
      `Temos o prazer em te receber aqui na nossa comunidade!\nSinta-se √† vontade para participar do que houvermos a oferecer.\n` +
      `Oferecemos meios de divulga√ß√µes, confira os canais da categoria #divulga√ß√µes.\n\n` +
      `N√£o se esque√ßa de conferir a descri√ß√£o de canais e as regras do servidor para uma melhor conviv√™ncia!`
    )
    .addFields(
      { 
        name: 'üìö Comandos √∫teis para come√ßar:', 
        value: '‚Ä¢ `/ajuda-canal` - Informa√ß√µes sobre canais\n' +
               '‚Ä¢ `/ajuda-parceria` - Como fazer parcerias\n' +
               '‚Ä¢ `/ajuda-regras` - Termos de conviv√™ncia\n' +
               '‚Ä¢ `/perfil` - Ver seu perfil\n' +
               '‚Ä¢ `/cor` - Personalizar sua cor'
      }
    )
    .setThumbnail(member.user.displayAvatarURL({ dynamic: true, size: 256 }))
    .setFooter({ text: `Aproveite sua estadia!` })
    .setTimestamp();
}

// Fun√ß√£o para encontrar o canal de boas-vindas
async function findWelcomeChannel(guild, ignisContext) {
  try {
    // Buscar a configura√ß√£o de canais no MongoDB
    const canalConfig = await database.findOne(database.COLLECTIONS.CONFIGURACOES, { _id: 'canais' });
    
    if (!canalConfig || !canalConfig.categorias) {
      console.log('Configura√ß√£o de canais n√£o encontrada');
      return null;
    }
    
    // Procurar o canal de boas-vindas (geralmente conversas-gerais ou boas-vindas)
    for (const categoria of canalConfig.categorias) {
      if (!categoria.canais) continue;
      
      // Primeiro procura um canal espec√≠fico "boas-vindas"
      let canal = categoria.canais.find(c => c.nome === 'boas-vindas');
      
      // Se n√£o encontrar, tenta o canal "conversas-gerais"
      if (!canal) {
        canal = categoria.canais.find(c => c.nome === 'conversas-gerais');
      }
      
      // Se encontrou algum canal, retorna-o
      if (canal) {
        return await guild.channels.fetch(canal.id).catch(() => null);
      }
    }
    
    // Se n√£o encontrou nenhum canal adequado
    return null;
  } catch (error) {
    console.error('Erro ao buscar canal de boas-vindas:', error);
    return null;
  }
}

// Fun√ß√£o para verificar se um usu√°rio est√° na lista de evitar_spam
async function verificarUsuarioEmEvitarSpam(userId) {
  try {
    const evitarSpamDoc = await database.findOne(database.COLLECTIONS.DADOS_USUARIOS, { _id: 'evitar_spam' });
    
    // Se o documento n√£o existir ou n√£o tiver a propriedade usuarios, o usu√°rio n√£o est√° na lista
    if (!evitarSpamDoc || !evitarSpamDoc.usuarios) return false;
    
    // Verificar se o ID do usu√°rio est√° na lista
    return evitarSpamDoc.usuarios.some(user => user.userId === userId);
  } catch (error) {
    console.error(`Erro ao verificar usu√°rio ${userId} na lista de evitar_spam:`, error);
    return false; // Em caso de erro, assume que o usu√°rio n√£o est√° na lista
  }
}

// Fun√ß√£o para adicionar um usu√°rio √† lista de evitar_spam
async function adicionarUsuarioEmEvitarSpam(userId) {
  try {
    const evitarSpamDoc = await database.findOne(database.COLLECTIONS.DADOS_USUARIOS, { _id: 'evitar_spam' });
    
    // Se o documento n√£o existir ou n√£o tiver a propriedade usuarios, inicialize-a
    if (!evitarSpamDoc || !evitarSpamDoc.usuarios) {
      await database.upsert(
        database.COLLECTIONS.DADOS_USUARIOS,
        { _id: 'evitar_spam' },
        { $set: { usuarios: [{ userId }] } }
      );
      console.log(`Usu√°rio ${userId} adicionado √† nova lista de evitar_spam`);
      return true;
    }
    
    // Verificar se o usu√°rio j√° est√° na lista
    if (evitarSpamDoc.usuarios.some(user => user.userId === userId)) {
      console.log(`Usu√°rio ${userId} j√° est√° na lista de evitar_spam`);
      return false;
    }
    
    // Adicionar o usu√°rio √† lista
    await database.updateOne(
      database.COLLECTIONS.DADOS_USUARIOS,
      { _id: 'evitar_spam' },
      { $push: { usuarios: { userId } } }
    );
    
    console.log(`Usu√°rio ${userId} adicionado √† lista de evitar_spam`);
    return true;
  } catch (error) {
    console.error(`Erro ao adicionar usu√°rio ${userId} √† lista de evitar_spam:`, error);
    return false;
  }
}

module.exports = { initialize };